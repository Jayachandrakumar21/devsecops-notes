# Topic: IaaC
Terraform
Improvements
=============
Ansible vault to SSM parameter/secret integration with Ansible
IAM Users migration to IAM Roles -->

shell, ansible, terraform,sql, perl, customised scripting
1. syntax --> variables, data types, conditions, functions, loops, and error handling
2. Process understanding

CRUD --> Ansible has failed to manage the infrastructure. For example, if some manual edits happen, Ansible can't recognise those. It creates duplicate resources. So, Ansible is not perfect in state management

Ansible --> Within the server, Ansible is perfect

Manual infra
=============
1. time
2. Human errors
3. cost
4. reusable effort
5. Don't know who made a  mistake
6. Modifications are not easy
7. not scalable

IaaC --> Infra as a code

Version control --> you can version control your infra. expense-infra-1.0 expense-infra-2.0
restore if something goes wrong --> easy to restore if something goes wrong
Consistent infra --> you can create the same infra across all environments
Inventory management --> you can understand the resources by seeing the terraform files
Dependency management --> Terraform can understand the dependencies between resources. First, it will create dependencies and then actual resources
code reusability --> terraform modules, you can create similar infra for any number of projects using modules
Cost --> automation of CRUD --> we can save costs
state management
declarative --> easy syntax
Git --> you can review the code before apply

ansible modules
terraform providers --> provider means a system which terraform can connect and create resources

	terraform aws provider
terraform file extensions are .tf
terraform uses HCL --> Hashicorp configuration language

resource "type-of-resource" "name-of-resource" {
	your-parameters
}

resource "aws_instance" "this" {

}

terraform init
